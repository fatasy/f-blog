generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// models.prisma

// Usuários
model User {
  id                 Int                @id @default(autoincrement())
  username           String             @unique
  email              String             @unique
  password           String
  role               String             @default("reader")
  posts              Post[]
  comments           Comment[]
  profile            Profile?
  sessions           Session[]
  refreshTokens      RefreshToken[]
  emailVerifications EmailVerification?
  status             String
}

// Perfis de Usuário
model Profile {
  id     Int     @id @default(autoincrement())
  bio    String?
  avatar String?
  userId Int     @unique
  user   User    @relation(fields: [userId], references: [id])
}

// Posts
model Post {
  id         Int        @id @default(autoincrement())
  title      String
  content    String
  published  Boolean    @default(false)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  authorId   Int
  author     User       @relation(fields: [authorId], references: [id])
  categories Category[] @relation("PostCategories")
  tags       Tag[]
  comments   Comment[]
}

// Categorias
model Category {
  id    Int    @id @default(autoincrement())
  name  String @unique
  posts Post[] @relation("PostCategories")
}

// Tags
model Tag {
  id    Int    @id @default(autoincrement())
  name  String @unique
  posts Post[]
}

// Comentários
model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  postId    Int
  post      Post     @relation(fields: [postId], references: [id])
  authorId  Int
  author    User     @relation(fields: [authorId], references: [id])
}

// Sessões
model Session {
  id           Int      @id @default(autoincrement())
  accessToken  String
  refreshToken String
  expiresAt    DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  userId       Int
  user         User     @relation(fields: [userId], references: [id])
}

// Refresh Tokens
model RefreshToken {
  id        Int      @id @default(autoincrement())
  token     String
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
}

// Verificação de Email
model EmailVerification {
  id        Int      @id @default(autoincrement())
  token     String
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int      @unique
  user      User     @relation(fields: [userId], references: [id])
}
